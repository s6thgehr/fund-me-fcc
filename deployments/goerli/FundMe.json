{
  "address": "0x3AFcbb2201754f902bEAfa0A65cB1c043b480543",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getFundedAmountFromAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2c257d1cabdbafb74f19922c02ec513f4d1708b90122ff30fdee13004f841ca3",
  "receipt": {
    "to": null,
    "from": "0xc03095B6F7A918d86e89Bd9F1a0d48f2c26B6bFF",
    "contractAddress": "0x3AFcbb2201754f902bEAfa0A65cB1c043b480543",
    "transactionIndex": 72,
    "gasUsed": "1043711",
    "logsBloom": "0x
    "blockHash": "0xa0d8d9586c4d65621b77e7e5bbb876f55733f5bbd8fd25a06281c70a7434ff6e",
    "transactionHash": "0x2c257d1cabdbafb74f19922c02ec513f4d1708b90122ff30fdee13004f841ca3",
    "logs": [],
    "blockNumber": 7755675,
    "cumulativeGasUsed": "18215828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "a74b836f03829c57205dd7cca5da0dc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getFundedAmountFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getFundedAmountFromAddress(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n}\\n\",\"keccak256\":\"0x7db3eeb37bedd2b70f7214a9d09c3004bdcf8d888d460024e1cc3c42ee050a31\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x03051d7dee7664301ac9daa006156decaa2bc64d2ecfc91fe35499cbaca42dc2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013023803806200130283398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161118262000180600039600081816103d501528181610624015281816106bc01526108b201526111826000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461013b578063a50ef9c614610166578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630d8e6e2c146100a35780633ccfd60b146100ce5780636b69a592146100e5578063893d20e81461011057610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100b861033b565b6040516100c59190610b1d565b60405180910390f35b3480156100da57600080fd5b506100e36103d3565b005b3480156100f157600080fd5b506100fa610613565b6040516101079190610b1d565b60405180910390f35b34801561011c57600080fd5b50610125610620565b6040516101329190610b79565b60405180910390f35b34801561014757600080fd5b50610150610648565b60405161015d9190610bf3565b60405180910390f35b34801561017257600080fd5b5061018d60048036038101906101889190610c3f565b610672565b60405161019a9190610b1d565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106ba565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c98565b610948565b6040516101f89190610b79565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099090919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d22565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d71565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610dba565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610458576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105035760006001828154811061047e5761047d610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104fb90610e16565b91505061045b565b50600067ffffffffffffffff81111561051f5761051e610e5e565b5b60405190808252806020026020018201604052801561054d5781602001602082028036833780820191505090505b5060019080519060200190610563929190610a5d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058a90610ebe565b60006040518083038185875af1925050503d80600081146105c7576040519150601f19603f3d011682016040523d82523d6000602084013e6105cc565b606091505b5050905080610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610f1f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610779575b5050505050905060005b815181101561084d5760008282815181106107eb576107ea610de7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590610e16565b9150506107cd565b50600067ffffffffffffffff81111561086957610868610e5e565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108f490610ebe565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b505090508061094457600080fd5b5050565b60006001828154811061095e5761095d610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061099c836109cc565b90506000670de0b6b3a764000085836109b59190610f3f565b6109bf9190610fb0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190611059565b5050509150506402540be40081610a5591906110d4565b915050919050565b828054828255906000526020600020908101928215610ad6579160200282015b82811115610ad55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a7d565b5b509050610ae39190610ae7565b5090565b5b80821115610b00576000816000905550600101610ae8565b5090565b6000819050919050565b610b1781610b04565b82525050565b6000602082019050610b326000830184610b0e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6382610b38565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b6000819050919050565b6000610bb9610bb4610baf84610b38565b610b94565b610b38565b9050919050565b6000610bcb82610b9e565b9050919050565b6000610bdd82610bc0565b9050919050565b610bed81610bd2565b82525050565b6000602082019050610c086000830184610be4565b92915050565b600080fd5b610c1c81610b58565b8114610c2757600080fd5b50565b600081359050610c3981610c13565b92915050565b600060208284031215610c5557610c54610c0e565b5b6000610c6384828501610c2a565b91505092915050565b610c7581610b04565b8114610c8057600080fd5b50565b600081359050610c9281610c6c565b92915050565b600060208284031215610cae57610cad610c0e565b5b6000610cbc84828501610c83565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d0c601b83610cc5565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7c82610b04565b9150610d8783610b04565b9250828201905080821115610d9f57610d9e610d42565b5b92915050565b600081519050610db481610c6c565b92915050565b600060208284031215610dd057610dcf610c0e565b5b6000610dde84828501610da5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e2182610b04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e5357610e52610d42565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ea8600083610e8d565b9150610eb382610e98565b600082019050919050565b6000610ec982610e9b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f09600b83610cc5565b9150610f1482610ed3565b602082019050919050565b60006020820190508181036000830152610f3881610efc565b9050919050565b6000610f4a82610b04565b9150610f5583610b04565b9250828202610f6381610b04565b91508282048414831517610f7a57610f79610d42565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fbb82610b04565b9150610fc683610b04565b925082610fd657610fd5610f81565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100081610fe1565b811461100b57600080fd5b50565b60008151905061101d81610ff7565b92915050565b6000819050919050565b61103681611023565b811461104157600080fd5b50565b6000815190506110538161102d565b92915050565b600080600080600060a0868803121561107557611074610c0e565b5b60006110838882890161100e565b955050602061109488828901611044565b94505060406110a588828901610da5565b93505060606110b688828901610da5565b92505060806110c78882890161100e565b9150509295509295909350565b60006110df82611023565b91506110ea83611023565b92508282026110f881611023565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111305761112f610d42565b5b828205841483151761114557611144610d42565b5b509291505056fea26469706673582212204353461aff067f1e7a4cf0c145f76951b4ba3ae8b606a7f676e600d88eaa95ee64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd1461013b578063a50ef9c614610166578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630d8e6e2c146100a35780633ccfd60b146100ce5780636b69a592146100e5578063893d20e81461011057610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100b861033b565b6040516100c59190610b1d565b60405180910390f35b3480156100da57600080fd5b506100e36103d3565b005b3480156100f157600080fd5b506100fa610613565b6040516101079190610b1d565b60405180910390f35b34801561011c57600080fd5b50610125610620565b6040516101329190610b79565b60405180910390f35b34801561014757600080fd5b50610150610648565b60405161015d9190610bf3565b60405180910390f35b34801561017257600080fd5b5061018d60048036038101906101889190610c3f565b610672565b60405161019a9190610b1d565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106ba565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c98565b610948565b6040516101f89190610b79565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461099090919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d22565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d71565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610dba565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610458576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105035760006001828154811061047e5761047d610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104fb90610e16565b91505061045b565b50600067ffffffffffffffff81111561051f5761051e610e5e565b5b60405190808252806020026020018201604052801561054d5781602001602082028036833780820191505090505b5060019080519060200190610563929190610a5d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058a90610ebe565b60006040518083038185875af1925050503d80600081146105c7576040519150601f19603f3d011682016040523d82523d6000602084013e6105cc565b606091505b5050905080610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610f1f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610779575b5050505050905060005b815181101561084d5760008282815181106107eb576107ea610de7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590610e16565b9150506107cd565b50600067ffffffffffffffff81111561086957610868610e5e565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a5d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108f490610ebe565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b505090508061094457600080fd5b5050565b60006001828154811061095e5761095d610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061099c836109cc565b90506000670de0b6b3a764000085836109b59190610f3f565b6109bf9190610fb0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190611059565b5050509150506402540be40081610a5591906110d4565b915050919050565b828054828255906000526020600020908101928215610ad6579160200282015b82811115610ad55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a7d565b5b509050610ae39190610ae7565b5090565b5b80821115610b00576000816000905550600101610ae8565b5090565b6000819050919050565b610b1781610b04565b82525050565b6000602082019050610b326000830184610b0e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6382610b38565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b6000819050919050565b6000610bb9610bb4610baf84610b38565b610b94565b610b38565b9050919050565b6000610bcb82610b9e565b9050919050565b6000610bdd82610bc0565b9050919050565b610bed81610bd2565b82525050565b6000602082019050610c086000830184610be4565b92915050565b600080fd5b610c1c81610b58565b8114610c2757600080fd5b50565b600081359050610c3981610c13565b92915050565b600060208284031215610c5557610c54610c0e565b5b6000610c6384828501610c2a565b91505092915050565b610c7581610b04565b8114610c8057600080fd5b50565b600081359050610c9281610c6c565b92915050565b600060208284031215610cae57610cad610c0e565b5b6000610cbc84828501610c83565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d0c601b83610cc5565b9150610d1782610cd6565b602082019050919050565b60006020820190508181036000830152610d3b81610cff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7c82610b04565b9150610d8783610b04565b9250828201905080821115610d9f57610d9e610d42565b5b92915050565b600081519050610db481610c6c565b92915050565b600060208284031215610dd057610dcf610c0e565b5b6000610dde84828501610da5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e2182610b04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e5357610e52610d42565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ea8600083610e8d565b9150610eb382610e98565b600082019050919050565b6000610ec982610e9b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f09600b83610cc5565b9150610f1482610ed3565b602082019050919050565b60006020820190508181036000830152610f3881610efc565b9050919050565b6000610f4a82610b04565b9150610f5583610b04565b9250828202610f6381610b04565b91508282048414831517610f7a57610f79610d42565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fbb82610b04565b9150610fc683610b04565b925082610fd657610fd5610f81565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100081610fe1565b811461100b57600080fd5b50565b60008151905061101d81610ff7565b92915050565b6000819050919050565b61103681611023565b811461104157600080fd5b50565b6000815190506110538161102d565b92915050565b600080600080600060a0868803121561107557611074610c0e565b5b60006110838882890161100e565b955050602061109488828901611044565b94505060406110a588828901610da5565b93505060606110b688828901610da5565b92505060806110c78882890161100e565b9150509295509295909350565b60006110df82611023565b91506110ea83611023565b92508282026110f881611023565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111305761112f610d42565b5b828205841483151761114557611144610d42565b5b509291505056fea26469706673582212204353461aff067f1e7a4cf0c145f76951b4ba3ae8b606a7f676e600d88eaa95ee64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}